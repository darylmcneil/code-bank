Description: >
  Daryl McNeil / Udacity 2019

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to a resource.
    Type: String
  UrlName: 
    Description: full url for WebAppLB
    Type: String
  MyIP:
    Description: IP address for SSH connecction
    Type: String
  S3RoleArn:
    Description: read-only S3 access service role for ec2
    Type: String   
Resources:

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our host and SSH from My IP
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref "MyIP"
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      Userdata:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install Apache (Web Server)
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-06d51e91cea0dac8d
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      KeyName: "nanoprojectkey"
      SecurityGroups:
      - Ref: "WebServerSecGroup"
      InstanceType: "t3.medium"
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: "10"
          DeleteOnTermination: "false"
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - nanos3role
  nanos3role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - "ec2.amazonaws.com"
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonS3ReadOnlyAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: ['s3:Get*','s3:List*']               
                Resource: "arn:aws:iam::110556603820:role/nanos3role"
  NanoBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: PublicRead
      BucketName: nanos3bucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-PUB-NETS"
      LaunchConfigurationName:
        Ref: "WebAppLaunchConfig"
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: "WebAppTargetGroup"
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN" 
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN" 
      SecurityGroups:
      - Ref: LBSecGroup 
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: "forward"
      TargetGroupArn:
        Ref: WebAppTargetGroup
      LoadBalancerArn: 
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: "forward"
      - TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:

  HttpUrl:
    Description: Full LoadBalancerName
    Value: !GetAtt WebAppLB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-fullname 
  FullHttpUrl:
    Description: Full Browser URL
    Value: !Join [ ",", [ !Ref UrlName, !GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-xcredit